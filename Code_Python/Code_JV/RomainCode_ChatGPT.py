# -*- coding: utf-8 -*-
"""
Created on Mon Mar  4 17:27:15 2024

@author: JosephVermeil

GENERATED BY ChatGPT 3.5 !
This Python code mirrors the functions defined in the Mathematica notebook. 
Note that I've used the scipy.special module to access the elliptic integrals 
ellipe and ellipk, which are equivalent to EllipticE and EllipticK in Mathematica. 
Also, make sure to import any additional libraries that may be required for specific 
functionalities such as root finding, optimization, etc.


"""

import numpy as np
from scipy.special import ellipe, ellipk

def E1(B):
    return ellipe(-B**2)

def E2(B):
    return ellipk(-B**2)

def S(a, B):
    return 0.5 * a**2 + (a * B)**2 * ((2/B * E1(B)) - (1/B * E2(B)) + 2)

def V(a, B):
    return 0.5 * (a * B)**3 * ((3/B**2) + 8 + (1/B * (8 + 1/B**2)) * E1(B) - (1/B * (4 + 1/B**2)) * E2(B))

def gamma0(z, v1, alpha0):
    return 0.5 * ((z * v1)**2 + alpha0)**0.5 + v1 - 1

def gamma(S, z, v1, alpha0, K):
    return K * (S - 1) + gamma0(z, v1, alpha0)

def asol(h, B):
    return h / (B + E1(B) - E2(B))

def eqforB(B, a, z, v1, alpha0, K):
    return gamma(S(a, B), z, v1, alpha0, K) / (a * B) - (gamma0(z, v1, alpha0) / h) - ((z * v1)**2 / V(a, B)**2 + alpha0)**0.5 + v1 / V(a, B) - 1

def Bsol(h, z, v1, alpha0, K):
    return optimize.newton(eqforB, x0=1, args=(asol(h, B), z, v1, alpha0, K))

def Eq2(alpha0, z, v1, V, h, K):
    return (alpha0 + (z**2 * v1**2) / V**2)**0.5 + v1 / V - 1 - gamma0(z, v1, alpha0) / h - (K / h) * (V / (3 * h) - 1)

def Vapprox(alpha0, z, v1, h, K):
    return optimize.newton(Eq2, x0=0.5, args=(alpha0, z, v1, h, K))


