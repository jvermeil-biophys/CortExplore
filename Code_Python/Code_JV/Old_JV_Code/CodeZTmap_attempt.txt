
    def computeZ(self, matchingDirection, plot = 0):
        

        if len(self.deptho) == 0:
            return('Error, no depthograph associated with this trajectory')

        else:
            Ddz, Ddx = self.deptho.shape[0], self.deptho.shape[1]
            iF = self.dict['iF'][0]
            previousZ = -1
            
            #### Enable new Z plot here
            computeMapZT = False
            # nt, nz = np.sum(self.dict['bestStd']), self.deptho.shape[0]
            mapZT = []
            
            # ###################################################################
            
            while iF <= max(self.dict['iF']):
                
            #### Enable plots of Z detection  here
                
                plot = 0
                # if (iF >= 0 and iF <= 30) or (iF > 178 and iF <= 208):
                #     plot = 1

            # ###################################################################

                if iF not in self.dict['iF']: # this index isn't in the trajectory list => the frame was removed for some reason.
                    iF += 1 # Let's just go to the next index

                else:
                    F = self.listFrames[iF]
                    Nup = F.Nuplet
                    if Nup <= 1:
                        framesNuplet = [F]
                        iFNuplet = [iF]
                        iF += 1
                    elif Nup > 1:
                        framesNuplet = [F]
                        iFNuplet = [iF]
                        jF = 1
                        while iF+jF <= max(self.dict['iF']) and self.listFrames[iF+jF].status_nUp == F.status_nUp:
                            if iF+jF in self.dict['iF']: # One of the images of the triplet may be invalid,
                                # and we don't want to take it. With this test we won't
                                nextF = self.listFrames[iF+jF]
                                framesNuplet.append(nextF)
                                iFNuplet.append(iF+jF)
                            jF += 1
                            
                        iF += jF
                        
                        
                    # if computeMapZT:
                    #     Z, Zscanned, sumFinalD = self.findZ_Nuplet(framesNuplet, iFNuplet, Nup, previousZ, 
                    #                           matchingDirection, plot, computeMapZT)
                    #     maxD = np.max(sumFinalD)
                    #     newLine = np.zeros(self.deptho.shape[0])
                    #     newLine[Zscanned] = (maxD - sumFinalD)
                    #     mapZT.append(newLine)
                        
                        
                    # else:
                    Z = self.findZ_Nuplet(framesNuplet, iFNuplet, Nup, previousZ, 
                                          matchingDirection, plot, computeMapZT)
                        
                        
                    previousZ = Z
                    # This Z_pix has no meaning in itself, it needs to be compared to the depthograph Z reference point,
                    # which is depthoZFocus.

                    Zr = self.depthoZFocus - Z # If you want to find it back, Z = depthoZFocus - Zr
                    # This definition was chosen so that when Zr > 0, the plane of observation of the bead is HIGHER than the focus
                    # and accordingly when Zr < 0, the plane of observation of the bead is LOWER than the focus

                    mask = np.array([(iF in iFNuplet) for iF in self.dict['iF']])
                    self.dict['Zr'][mask] = Zr
                    
            self.mapZT = np.array(mapZT)



    def findZ_Nuplet(self, framesNuplet, iFNuplet, Nup, previousZ, 
                     matchingDirection, plot = False, computeMapZT = False):
        # try:
        Nframes = len(framesNuplet)
        listStatus_1 = [F.status_frame for F in framesNuplet]
        listXY = [[self.dict['X'][np.where(self.dict['iF']==iF)][0],
                   self.dict['Y'][np.where(self.dict['iF']==iF)][0]] for iF in iFNuplet]
        listiS = [self.dict['iS'][np.where(self.dict['iF']==iF)][0] for iF in iFNuplet]
        cleanSize = ufun.getDepthoCleanSize(self.D, self.scale)
        hdSize = self.deptho.shape[1]
        depthoDepth = self.deptho.shape[0]
        listProfiles = np.zeros((Nframes, hdSize))
        listROI = []
        listWholeROI = []
        for i in range(Nframes):
            xx = np.arange(0, 5)
            yy = np.arange(0, cleanSize)
            try:
                X, Y, iS = int(np.round(listXY[i][0])), int(np.round(listXY[i][1])), listiS[i] # > We could also try to recenter the image to keep a subpixel resolution here
                # line that is 5 pixels wide
                wholeROI = framesNuplet[i].F[Y-cleanSize//2:Y+cleanSize//2+1, X-cleanSize//2:X+cleanSize//2+1]
                profileROI = framesNuplet[i].F[Y-cleanSize//2:Y+cleanSize//2+1, X-2:X+3]
                f = interpolate.interp2d(xx, yy, profileROI, kind='cubic')
                # Now use the obtained interpolation function and plot the result:
                xxnew = xx
                yynew = np.linspace(0, cleanSize, hdSize)
                profileROI_hd = f(xxnew, yynew)

            except: # If the vertical slice doesn't work, try the horizontal one
                print(gs.ORANGE + 'error with the vertical slice -> trying with horizontal one')
                print('iFNuplet')
                print(iFNuplet)
                print('Roi')
                print(Y-2,Y+3, X-cleanSize//2,X+cleanSize//2+1)
                print('' + gs.NORMAL)

                xx, yy = yy, xx
                X, Y, iS = int(np.round(listXY[i][0])), int(np.round(listXY[i][1])), listiS[i] # > We could also try to recenter the image to keep a subpixel resolution here
                # line that is 5 pixels wide
                wholeROI = framesNuplet[i].F[Y-cleanSize//2:Y+cleanSize//2+1, X-cleanSize//2:X+cleanSize//2+1]
                profileROI = framesNuplet[i].F[Y-2:Y+3, X-cleanSize//2:X+cleanSize//2+1]
                f = interpolate.interp2d(xx, yy, profileROI, kind='cubic')
                # Now use the obtained interpolation function and plot the result:
                xxnew = np.linspace(0, cleanSize, hdSize)
                yynew = yy
                profileROI_hd = f(xxnew, yynew).T

            listROI.append(profileROI)
            listWholeROI.append(wholeROI)

            listProfiles[i,:] = profileROI_hd[:,5//2] * (1/5)
            for j in range(1, 1 + 5//2):
                listProfiles[i,:] += profileROI_hd[:,5//2-j] * (1/5)
                listProfiles[i,:] += profileROI_hd[:,5//2+j] * (1/5)

        listProfiles = listProfiles.astype(np.uint16)



        # now use listStatus_1, listProfiles, self.deptho + data about the jump between Nuplets ! (TBA)
        # to compute the correlation function
        nVoxels = int(np.round(int(self.Zstep)/self.depthoStep))
        
        if previousZ == -1:
            Ztop = 0
            Zbot = depthoDepth
        
        elif Nup > 1:
            HW = self.HWScan_triplets
            halfScannedDepth_raw = int(HW / self.depthoStep)
            Ztop = max(0, previousZ - halfScannedDepth_raw) 
            Zbot = min(depthoDepth, previousZ + halfScannedDepth_raw)
            
        elif Nup == 1:
            HW = self.HWScan_singlets
            halfScannedDepth_raw = int(HW / self.depthoStep) 
            Ztop = max(0, previousZ - halfScannedDepth_raw) 
            Zbot = min(depthoDepth, previousZ + halfScannedDepth_raw)

        scannedDepth = Zbot - Ztop
        # print(Nup, depthoDepth, Ztop, Zbot, scannedDepth)
        
        listDistances = np.zeros((Nframes, scannedDepth))
        listZ = np.zeros(Nframes, dtype = int)
        Zscanned = np.arange(Ztop, Zbot, 1, dtype=int)
        
        subDeptho = self.deptho[Ztop:Zbot, :]
        
        for i in range(Nframes):
            
            listDistances[i] = ufun.squareDistance(subDeptho, listProfiles[i], normalize = True) # Utility functions
            listZ[i] = Ztop + np.argmin(listDistances[i])

        # Translate the profiles that must be translated (status_frame 1 & 3 if Nup = 3)
        # and don't move the others (status_frame 2 if Nup = 3 or the 1 profile when Nup = 1)
        if Nup > 1:
            finalDists = ufun.matchDists(listDistances, listStatus_1, Nup, 
                                        nVoxels, direction = matchingDirection)
        elif Nup == 1:
            finalDists = listDistances

        sumFinalD = np.sum(finalDists, axis = 0)


        #### Tweak this part to force the Z-detection to a specific range to prevent abnormal jumps
        if previousZ == -1: # First image => No restriction
            Z = np.argmin(sumFinalD)
            maxDz = 0
            
        else: # Not first image => Restriction
            if Nup > 1 and previousZ != -1: # Not first image AND Triplets => Restriction Triplets
                maxDz = self.maxDz_triplets
            elif Nup == 1 and previousZ != -1: # Not first image AND singlet => Restriction Singlet
                maxDz = self.maxDz_singlets
                
            limInf = max(previousZ - maxDz, 0) - Ztop
            limSup = min(previousZ + maxDz, depthoDepth) - Ztop
            Z = Ztop + limInf + np.argmin(sumFinalD[limInf:limSup])



        #### Fit quality
        # Ddz, Ddx = depthoHD.shape[0], depthoHD.shape[1]
        # print(Ddz, Ddx)
        # dz_fitPoly = int(Ddz/32)
        
        # def f_sq(x, k):
        #     return(k * x**2)
        
        # listDistances = np.zeros((Ddz, Ddz))
        # listZQuality = np.zeros(Ddz)
        
        # for z in range(Ddz):
            
        #     profile_z = depthoHD[z, :]
        #     listDistances[z] = ufun.squareDistance(depthoHD, profile_z, normalize = True) # Utility functions
        #     z_start = max(0, z - dz_fitPoly)
        #     z_stop = min(Ddz - 1, z + dz_fitPoly)
        #     # print(z, z_start, z_stop)
        #     Cost_fitPoly = listDistances[z][z_start : z_stop + 1]
        #     X_fitPoly = np.arange(z_start - z, z_stop - z + 1, dtype=int)
        #     popt, pcov = curve_fit(f_sq, X_fitPoly, Cost_fitPoly - listDistances[z][z], 
        #                            p0=[1], bounds=(-np.inf, np.inf))
        #     z_quality = popt[0]*1e3
        #     listZQuality[z] = z_quality
        
        # Z = np.array([i for i in range(Ddz)]) - depthoZFocusHD
        # plt.plot(Z, listZQuality)




        #### Important plotting option here
        if plot >= 1:
            plt.ioff()
            fig, axes = plt.subplots(5, 3, figsize = (16,16))
            
            cmap = 'magma'
            color_image = 'cyan'
            color_Nup = ['gold', 'darkorange', 'red']
            color_result = 'darkgreen'
            color_previousResult = 'turquoise'
            color_margin = 'aquamarine'
            
            im = framesNuplet[0].F
            X2, Y2 = listXY[0][0], listXY[0][1]
            
            deptho_zticks_list = np.arange(0, depthoDepth, 50*self.HDZfactor, dtype = int)
            deptho_zticks_loc = ticker.FixedLocator(deptho_zticks_list)
            deptho_zticks_format = ticker.FixedFormatter((deptho_zticks_list/self.HDZfactor).astype(int))

            
            if Nup == 1:
                direction = 'Single Image'
            else:
                direction = matchingDirection

            pStart, pStop = np.percentile(im, (1, 99))
            axes[0,0].imshow(im, vmin = pStart, vmax = 1.5*pStop, cmap = 'gray')
            images_ticks_loc = ticker.MultipleLocator(50)
            axes[0,0].xaxis.set_major_locator(images_ticks_loc)
            axes[0,0].yaxis.set_major_locator(images_ticks_loc)
            
            
            dx, dy = 50, 50
            axes[0,0].plot([X2], [Y2], marker = '+', c = 'red')
            axes[0,0].plot([X2-dx,X2-dx], [Y2-dy,Y2+dy], ls = '--', c = color_image, lw = 0.8)
            axes[0,0].plot([X2+dx,X2+dx], [Y2-dy,Y2+dy], ls = '--', c = color_image, lw = 0.8)
            axes[0,0].plot([X2-dx,X2+dx], [Y2-dy,Y2-dy], ls = '--', c = color_image, lw = 0.8)
            axes[0,0].plot([X2-dx,X2+dx], [Y2+dy,Y2+dy], ls = '--', c = color_image, lw = 0.8)

            # Plot the deptho then resize it better
            axes[0,1].imshow(self.deptho, cmap = cmap)
            XL0, YL0 = axes[0,1].get_xlim(), axes[0,1].get_ylim()
            extent = (XL0[0], YL0[0]*(5/3), YL0[0], YL0[1])
            axes[0,1].imshow(self.deptho, extent = extent, cmap = cmap)
            
            axes[0,1].yaxis.set_major_locator(deptho_zticks_loc)
            axes[0,1].yaxis.set_major_formatter(deptho_zticks_format)
            
            pixLineHD = np.arange(0, hdSize, 1)
            zPos = Zscanned
            
            
            for i in range(Nframes):
                status_frame = int(framesNuplet[i].status_frame)
                status_frame += (status_frame == 0)
                
                # Show the bead appearence
                axes[1,i].imshow(listWholeROI[i], cmap = cmap)
                images_ticks_loc = ticker.MultipleLocator(10)
                axes[1,i].xaxis.set_major_locator(images_ticks_loc)
                axes[1,i].yaxis.set_major_locator(images_ticks_loc)
                axes[1,i].set_title('Image {:.0f}/{:.0f} - '.format(status_frame, Nup) + direction, 
                                    fontsize = 14)
                axes[1,i].plot([cleanSize//2,cleanSize//2],[0,cleanSize-1], c=color_Nup[i], ls='--', lw = 1)
                
                # Show the profile of the beads
                axes[2,i].plot(pixLineHD, listProfiles[i], c = color_Nup[i])
                axes[2,i].set_xlabel('Position along the profile\n(Y-axis)', 
                                     fontsize = 9)
                axes[2,i].set_ylabel('Pixel intensity', 
                                     fontsize = 9)
                axes[2,i].set_title('Profile {:.0f}/{:.0f} - '.format(status_frame, Nup), 
                                    fontsize = 11)
                
                # Show the distance map to the deptho
                listDistances = np.array(listDistances)
                # inversed_listDistances = (listDistances[i] * (-1)) + np.max(listDistances[i])
                # peaks, peaks_prop = signal.find_peaks(inversed_listDistances, distance = self.HDZfactor * 20)
                axes[3,i].plot(zPos, listDistances[i])
                # axes[3,i].plot(zPos, inversed_listDistances, ls='--', lw=0.75, c='k')
                axes[3,i].xaxis.set_major_locator(deptho_zticks_loc)
                axes[3,i].xaxis.set_major_formatter(deptho_zticks_format)
                axes[3,i].set_xlabel('Position along the depthograph\n(Z-axis)', 
                                     fontsize = 9)
                axes[3,i].set_ylabel('Cost\n(Squared diff to deptho)', 
                                     fontsize = 9)
                axes[3,i].set_title('Cost curve {:.0f}/{:.0f}'.format(status_frame, Nup), 
                                    fontsize = 11)
                
                limy3 = axes[3,i].get_ylim()
                min_i = zPos[np.argmin(listDistances[i])]
                axes[3,i].plot([min_i, min_i], limy3, ls = '--', c = color_Nup[i])
                # for p in peaks:
                #     p_i = zPos[int(p)]
                #     axes[3,i].plot([p_i], [np.mean(limy3)], ls = '',
                #                   marker = 'v',  c = 'orange', mec = 'k', markersize = 8)
                #     axes[3,i].text(p_i, np.mean(limy3)*1.1, str(p_i/self.HDZfactor), c = 'k')
                axes[3,i].set_xlim([0, depthoDepth])
                
                #
                axes[4,i].plot(zPos, finalDists[i])
                axes[4,i].xaxis.set_major_locator(deptho_zticks_loc)
                axes[4,i].xaxis.set_major_formatter(deptho_zticks_format)
                axes[4,i].set_xlabel('Corrected position along the depthograph\n(Z-axis)', 
                                     fontsize = 9)
                axes[4,i].set_ylabel('Cost\n(Squared diff to deptho)', 
                                     fontsize = 9)
                axes[4,i].set_title('Cost curve with corrected position {:.0f}/{:.0f}'.format(status_frame, Nup), 
                                    fontsize = 11)
                
                limy4 = axes[4,i].get_ylim()
                min_i = zPos[np.argmin(finalDists[i])]
                axes[4,i].plot([min_i, min_i], limy4, ls = '--', c = color_Nup[i])
                # axes[4,i].text(min_i+5, np.mean(limy4), str(min_i/self.HDZfactor), c = 'k')
                axes[4,i].set_xlim([0, depthoDepth])

                axes[0,1].plot([axes[0,1].get_xlim()[0], axes[0,1].get_xlim()[1]-1], 
                               [listZ[i], listZ[i]], 
                               ls = '--', c = color_Nup[i])
                
                axes[0,1].plot([axes[0,1].get_xlim()[0], axes[0,1].get_xlim()[1]-1], 
                               [Z,Z], 
                               ls = '--', c = color_result)


            axes[0,2].plot(zPos, sumFinalD)
            axes[0,2].xaxis.set_major_locator(deptho_zticks_loc)
            axes[0,2].xaxis.set_major_formatter(deptho_zticks_format)
            limy0 = axes[0,2].get_ylim()
            axes[0,2].plot([Z, Z], limy0, ls = '-', c = color_result, label = 'Z', lw = 1.5)
            axes[0,2].plot([previousZ, previousZ], limy0, 
                           ls = '--', c = color_previousResult, label = 'previous Z', lw = 0.8)
            axes[0,2].plot([previousZ-maxDz, previousZ-maxDz], limy0,
                           ls = '--', c = color_margin, label = 'allowed margin', lw = 0.8)
            axes[0,2].plot([previousZ+maxDz, previousZ+maxDz], limy0,
                           ls = '--', c = color_margin, lw = 0.8)
            axes[0,2].set_xlim([0, depthoDepth])
            
            axes[0,2].set_xlabel('Position along the depthograph\n(Z-axis)', 
                                 fontsize = 9)
            axes[0,2].set_ylabel('Total Cost\n(Sum of Squared diff to deptho)', 
                                 fontsize = 9)
            axes[0,2].set_title('Sum of Cost curves with corrected position', 
                                fontsize = 11)
            axes[0,2].legend()
            
            for ax in axes.flatten():
                ax.tick_params(axis='x', labelsize=9)
                ax.tick_params(axis='y', labelsize=9)
            
            Nfig = plt.gcf().number
            iSNuplet = [F.iS+1 for F in framesNuplet]
            
            fig.tight_layout()
            fig.subplots_adjust(top=0.94)
            
            fig.suptitle('Frames '+str(iFNuplet)+' - Slices '+str(iSNuplet)+' ; '+\
                         'Z = {:.1f} slices = '.format(Z/self.HDZfactor) + \
                         '{:.4f} µm'.format(Z*(self.depthoStep/1000)),
                         y=0.98)
            
            if not os.path.isdir(cp.DirTempPlots):
                os.mkdir(cp.DirTempPlots)
                
            thisCellTempPlots = os.path.join(cp.DirTempPlots, self.cellID)
            if not os.path.isdir(thisCellTempPlots):
                os.mkdir(thisCellTempPlots)
            
            saveName = 'ZCheckPlot_S{:.0f}_B{:.0f}.png'.format(iSNuplet[0], self.iB+1)
            savePath = os.path.join(thisCellTempPlots, saveName)
            fig.savefig(savePath)
            plt.close(fig)
        
        plt.ion()
        
        if computeMapZT:
            return(Z, Zscanned, sumFinalD)    
            
        else:
            return(Z)

        # except Exception:
        #     print(gs.RED + '')
        #     traceback.print_exc()
        #     print('\n')
        #     print(gs.ORANGE + 'Error with the Z detection')
        #     print('iFNuplet')
        #     print(iFNuplet)
        #     print('Roi')
        #     print(Y-2,Y+3, X-cleanSize//2,X+cleanSize//2+1)
        #     print('Deptho shape')
        #     print(self.deptho.shape)
        #     print('Shapes of listDistances, finalDists, sumFinalD')
        #     print(listDistances.shape)
        #     print(finalDists.shape)
        #     print(sumFinalD.shape)
        #     print('previousZ, previousZ-maxDz, previousZ+maxDz')
        #     print(previousZ, previousZ-maxDz, previousZ+maxDz)
        #     print('' + gs.NORMAL)



def mainTracker():

#### 4.x - NEW
        
        # for iB in range(PTL.NB):
        #     traj = PTL.listTrajectories[iB]
        #     try:
        #         fig, ax = plt.subplots(1,1)
        #         pStart, pStop = np.percentile(traj.mapZT, (1, 99))
        #         ax.imshow(traj.mapZT, cmap = 'gray', vmin = pStart, vmax = pStop)
        #         plt.show()
        #     except:
        #         pass